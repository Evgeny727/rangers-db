fragment Card on rangers_card {
  id
  name
  traits
  equip
  presence
  token_id
  token_count
  harm
  approach_conflict
  approach_reason
  approach_exploration
  approach_connection
  text
  set_id
  set_position
  quantity
  level
  type_id
  cost
  aspect_id
  progress
  back_card_id
  imagesrc
  area_id
  guide_entry
  progress_fixed
  flavor
  locations
  objective
  illustrator
  pack_id
  deck_limit
  position
  spoiler
  sun_challenge
  mountain_challenge
  crest_challenge
  subset_id
  subset_position
}

fragment CardText on rangers_card_text {
  id
  locale
  name
  traits
  text
  flavor
  objective
  imagesrc
}

fragment CardSet on rangers_set {
  id
  name
  size
  type_id
}

fragment CardSetText on rangers_set_text {
  id
  locale
  name
}

fragment CardSetType on rangers_set_type {
  id
  name
}

fragment CardSetTypeText on rangers_set_type_text {
  id
  locale
  name
}

fragment CardToken on rangers_token {
  id
  name
  plurals
}

fragment CardTokenText on rangers_token_text {
  id
  locale
  name
  plurals
}

fragment CardAspect on rangers_aspect {
  id
  name
  short_name
}


fragment CardAspectText on rangers_aspect_text {
  id
  locale
  name
  short_name
}

fragment CardType on rangers_type {
  id
  name
}

fragment CardTypeText on rangers_type_text {
  id
  locale
  name
}


fragment CardPack on rangers_pack {
  id
  name
  position
}

fragment CardPackText on rangers_pack_text {
  id
  locale
  name
}

fragment CardArea on rangers_area {
  id
  name
}

fragment CardAreaText on rangers_area_text {
  id
  locale
  name
}

query getCards {
  rangers_card(
    where: { taboo_id: { _is_null: true } }
  ) {
    ...Card
  }
  rangers_card_text(
    where: { locale: { _eq: "en" } }
  ) {
    ...CardText
  }
}
query getTaboos {
  rangers_card(
    where: { taboo_id: { _is_null: true } }
  ) {
    ...Card
  }
  rangers_card_text(
    where: { locale: { _eq: "en" } }
  ) {
    ...CardText
  }
}


query getMetadata {
  rangers_area {
    ...CardArea
  }
  rangers_aspect {
    ...CardAspect
  }
  rangers_pack {
    ...CardPack
  }
  rangers_set {
    ...CardSet
  }
  rangers_set_type {
    ...CardSetType
  }
  rangers_token {
    ...CardToken
  }
  rangers_type {
    ...CardType
  }
}

query getTranslationData(
  $locale: String!
) {
  rangers_area_text(
    where: { locale: { _eq: $locale }}
  ){
    ...CardAreaText
  }
  rangers_aspect_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardAspectText
  }
  rangers_pack_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardPackText
  }
  rangers_set_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardSetText
  }
  rangers_set_type_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardSetTypeText
  }
  rangers_token_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardTokenText
  }
  rangers_type_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardTypeText
  }
  rangers_card_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardText
  }
}

query getTranslations($locale: String!) {
  rangers_card_text(where: {
    locale: { _eq: $locale }
  }) {
    ...CardText
  }
}

mutation upsertCard(
  $id: String!,
  $code: String!,
  $name: String,
  $traits: String,
  $equip: Int,
  $presence: Int,
  $token_id: String,
  $token_count: Int,
  $harm: Int,
  $approach_conflict: Int,
  $approach_reason: Int,
  $approach_exploration: Int,
  $approach_connection: Int,
  $text: String,
  $set_id: String,
  $set_position: Int,
  $quantity: Int,
  $level: Int,
  $type_id: String,
  $cost: Int,
  $aspect_id: String,
  $progress: Int,
  $deck_limit: Int,
  $position: Int,
  $area_id: String,
  $guide_entry: String,
  $progress_fixed: Boolean,
  $locations: jsonb,
  $pack_id: String,
  $illustrator: String,
  $flavor: String,
  $objective: String,

  $back_card_id: String
  $imagesrc: String
  $spoiler: Boolean
  $taboo_id: String
) {
	insert_rangers_card_one(
    object: {
      id: $id
      code: $code
      name: $name
      traits: $traits
      equip: $equip
      presence: $presence
      token_id: $token_id
      token_count: $token_count
      harm: $harm
      approach_conflict: $approach_conflict
      approach_reason: $approach_reason
      approach_exploration: $approach_exploration
      approach_connection: $approach_connection
      text: $text
      set_id: $set_id
      set_position: $set_position
      quantity: $quantity
      level: $level
      type_id: $type_id
      cost: $cost
      aspect_id: $aspect_id
      progress: $progress
      deck_limit: $deck_limit
      position: $position
      area_id: $area_id
      guide_entry: $guide_entry
      progress_fixed: $progress_fixed
      locations: $locations
      pack_id: $pack_id
      illustrator: $illustrator
      flavor: $flavor
      objective: $objective
      back_card_id: $back_card_id
      imagesrc: $imagesrc
      spoiler: $spoiler
      taboo_id: $taboo_id
    }
    on_conflict: {
      constraint: card_pkey
      update_columns: [
        id,
        name,
        traits,
        equip,
        presence,
        token_id,
        token_count,
        harm,
        approach_conflict,
        approach_reason,
        approach_exploration,
        approach_connection,
        text,
        set_id,
        set_position,
        quantity,
        level,
        type_id,
        cost,
        aspect_id,
        progress,
        area_id,
        guide_entry,
        progress_fixed,
        locations,
        pack_id,
        illustrator,
        flavor,
        objective,
        back_card_id,
        imagesrc,
        deck_limit,
        position,
        spoiler,
        taboo_id,
        code
      ]
    }
  ) {
    id
  }
}

mutation upsertCardSet(
  $id: String!,
  $name: String!,
  $type_id: String,
  $size: Int,
) {
  insert_rangers_set_one(
    object: {
      id: $id
      name: $name
      size: $size
      type_id: $type_id
    }
    on_conflict: {
      constraint: set_pkey
      update_columns: [
        id,
        name,
        size,
        type_id
      ]
    }
  ) {
    ...CardSet
  }
}

mutation upsertCardSetText(
  $id: String!,
  $locale: String!,
  $name: String!
) {
  insert_rangers_set_text_one(
    object: {
      id: $id
      locale: $locale
      name: $name
    }
    on_conflict: {
      constraint: set_text_pkey
      update_columns: [
        id,
        name
      ]
    }
  ) {
    ...CardSetText
  }
}



mutation upsertCardArea(
  $id: String!,
  $name: String!
) {
  insert_rangers_area_one(
    object: {
      id: $id
      name: $name
    }
    on_conflict: {
      constraint: area_pkey
      update_columns: [
        id,
        name
      ]
    }
  ) {
    ...CardArea
  }
}

mutation upsertCardAreaText(
  $id: String!,
  $locale: String!,
  $name: String!
) {
  insert_rangers_area_text_one(
    object: {
      id: $id
      locale: $locale
      name: $name
    }
    on_conflict: {
      constraint: area_text_pkey
      update_columns: [
        id,
        name
      ]
    }
  ) {
    ...CardAreaText
  }
}

mutation upsertCardSetType(
  $id: String!,
  $name: String!
) {
  insert_rangers_set_type_one(
    object: {
      id: $id
      name: $name
    }
    on_conflict: {
      constraint: set_type_pkey
      update_columns: [
        id,
        name
      ]
    }
  ) {
    ...CardSetType
  }
}

mutation upsertCardSetTypeText(
  $id: String!,
  $locale: String!,
  $name: String!
) {
  insert_rangers_set_type_text_one(
    object: {
      id: $id
      locale: $locale
      name: $name
    }
    on_conflict: {
      constraint: set_type_text_pkey
      update_columns: [
        id,
        name
      ]
    }
  ) {
    ...CardSetTypeText
  }
}


query getLocaleText(
  $locale: String!
) {
  rangers_area_text(
    where: { locale: { _eq: $locale } }
  ) {
    ...CardAreaText
  }
  rangers_card_text(
    where: { locale: { _eq: $locale } }
  ) {
    ...CardText
  }
  rangers_pack_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardPackText
  }
  rangers_set_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardSetText
  }
  rangers_set_type_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardSetTypeText
  }
  rangers_token_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardTokenText
  }
  rangers_type_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardTypeText
  }
  rangers_aspect_text(
    where: { locale: { _eq: $locale }}
  ) {
    ...CardAspectText
  }
}

mutation upsertCardText(
  $id: String!,
  $locale: String!,
  $name: String,
  $traits: String,
  $text: String,
  $flavor: String,
  $objective: String,
  $imagesrc: String
) {
	insert_rangers_card_text_one(
    object: {
      id: $id
      locale: $locale
      name: $name
      text: $text
      traits: $traits
      flavor: $flavor
      objective: $objective
      imagesrc: $imagesrc
    }
    on_conflict: {
      constraint: card_text_pkey
      update_columns: [
        id,
        locale,
        name,
        text,
        traits,
        flavor,
        objective,
        imagesrc
      ]
    }
  ) {
    id
    locale
  }
}


mutation upsertCardPack(
  $id: String!,
  $name: String!,
  $position: Int!
) {
	insert_rangers_pack_one(
    object: {
      id: $id
      name: $name
      position: $position
    }
    on_conflict: {
      constraint: pack_pkey
      update_columns: [
        id,
        name,
        position
      ]
    }
  ) {
    id
    name
    position
  }
}

mutation upsertCardPackText(
  $id: String!,
  $locale: String!,
  $name: String
) {
	insert_rangers_pack_text_one(
    object: {
      id: $id
      locale: $locale
      name: $name
    }
    on_conflict: {
      constraint: pack_text_pkey
      update_columns: [
        id,
        locale,
        name
      ]
    }
  ) {
    id
    locale
    name
  }
}

mutation upsertAspect(
  $id: String!,
  $name: String!,
  $short_name: String!
) {
  insert_rangers_aspect_one(
    object: {
      id: $id
      name: $name
      short_name: $short_name
    }
    on_conflict: {
      constraint: aspect_pkey
      update_columns: [
        name,
        short_name
      ]
    }
  ) {
    id
    name
    short_name
  }
}

mutation upsertAspectText(
  $id: String!,
  $locale: String!,
  $name: String!,
  $short_name: String!
) {
	insert_rangers_aspect_text_one(
    object: {
      id: $id
      name: $name
      short_name: $short_name
      locale: $locale
    }
    on_conflict: {
      constraint: aspect_text_pkey
      update_columns: [
        name,
        short_name
      ]
    }
  ) {
    id
    name
    short_name
  }
}


mutation upsertToken(
  $id: String!,
  $name: String!,
  $plurals: String!
) {
  insert_rangers_token_one(
    object: {
      id: $id
      name: $name
      plurals: $plurals
    }
    on_conflict: {
      constraint: token_pkey
      update_columns: [
        name,
        plurals
      ]
    }
  ) {
    id
    name
    plurals
  }
}

mutation upsertTokenText(
  $id: String!,
  $locale: String!,
  $name: String!,
  $plurals: String!
) {
	insert_rangers_token_text_one(
    object: {
      id: $id
      name: $name
      plurals: $plurals
      locale: $locale
    }
    on_conflict: {
      constraint: token_text_pkey
      update_columns: [
        name,
        plurals
      ]
    }
  ) {
    id
    name
    plurals
  }
}

mutation upsertCardType(
  $id: String!,
  $name: String!
) {
	insert_rangers_type_one(
    object: {
      id: $id
      name: $name
    }
    on_conflict: {
      constraint: type_pkey
      update_columns: [
        name
      ]
    }
  ) {
    id
    name
  }
}

mutation upsertCardTypeText(
  $id: String!,
  $locale: String!,
  $name: String!
) {
	insert_rangers_type_text_one(
    object: {
      id: $id
      name: $name
      locale: $locale
    }
    on_conflict: {
      constraint: type_text_pkey
      update_columns: [
        name
      ]
    }
  ) {
    id
    name
    locale
  }
}
